//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""868a7790-01a5-45cf-a2e2-e94e05fb2f09"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""75d92beb-35a4-4926-9f01-4ea65dd12dae"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""e8cbe26b-d410-4fb4-961e-66b39528d700"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""75b0dc0b-862f-4043-9f96-92657477b7f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SlotOne"",
                    ""type"": ""Button"",
                    ""id"": ""11211df4-83f5-4ee4-beea-b7bc8b96ebe0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SlotTwo"",
                    ""type"": ""Button"",
                    ""id"": ""1131d3d8-35c3-444d-ae27-621a6517f680"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SlotThree"",
                    ""type"": ""Button"",
                    ""id"": ""dad03b16-14e5-46fd-a3c1-d6316d08dc76"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8ee7cd56-2107-46ca-ba36-8feff725f2ff"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.05,y=0.05),InvertVector2(invertX=false)"",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""353fc894-cc9d-4ab4-b07b-70f9ae67c2d3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""58b0735b-3716-4f6b-b654-f789a039cb17"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ecbdd6d9-db93-40b3-addf-dca6c305eae3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""60f916dc-674f-49c2-aa90-ed3e49d63d4f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5bdf3934-74de-40d8-8916-add3960a1c8b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""94677a7d-6973-4687-925d-427c5c826bbf"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SlotOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b50d7c61-4098-4bfc-b7d2-88a77ab71000"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SlotTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a18573e-7201-422c-9ebd-c74786d81afe"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SlotThree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b590a10-a5a2-4a5d-aa0d-f1e3bdffead8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_Look = m_Main.FindAction("Look", throwIfNotFound: true);
        m_Main_Move = m_Main.FindAction("Move", throwIfNotFound: true);
        m_Main_Shoot = m_Main.FindAction("Shoot", throwIfNotFound: true);
        m_Main_SlotOne = m_Main.FindAction("SlotOne", throwIfNotFound: true);
        m_Main_SlotTwo = m_Main.FindAction("SlotTwo", throwIfNotFound: true);
        m_Main_SlotThree = m_Main.FindAction("SlotThree", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private IMainActions m_MainActionsCallbackInterface;
    private readonly InputAction m_Main_Look;
    private readonly InputAction m_Main_Move;
    private readonly InputAction m_Main_Shoot;
    private readonly InputAction m_Main_SlotOne;
    private readonly InputAction m_Main_SlotTwo;
    private readonly InputAction m_Main_SlotThree;
    public struct MainActions
    {
        private @PlayerActions m_Wrapper;
        public MainActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Main_Look;
        public InputAction @Move => m_Wrapper.m_Main_Move;
        public InputAction @Shoot => m_Wrapper.m_Main_Shoot;
        public InputAction @SlotOne => m_Wrapper.m_Main_SlotOne;
        public InputAction @SlotTwo => m_Wrapper.m_Main_SlotTwo;
        public InputAction @SlotThree => m_Wrapper.m_Main_SlotThree;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void SetCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_MainActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnLook;
                @Move.started -= m_Wrapper.m_MainActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnMove;
                @Shoot.started -= m_Wrapper.m_MainActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnShoot;
                @SlotOne.started -= m_Wrapper.m_MainActionsCallbackInterface.OnSlotOne;
                @SlotOne.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnSlotOne;
                @SlotOne.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnSlotOne;
                @SlotTwo.started -= m_Wrapper.m_MainActionsCallbackInterface.OnSlotTwo;
                @SlotTwo.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnSlotTwo;
                @SlotTwo.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnSlotTwo;
                @SlotThree.started -= m_Wrapper.m_MainActionsCallbackInterface.OnSlotThree;
                @SlotThree.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnSlotThree;
                @SlotThree.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnSlotThree;
            }
            m_Wrapper.m_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @SlotOne.started += instance.OnSlotOne;
                @SlotOne.performed += instance.OnSlotOne;
                @SlotOne.canceled += instance.OnSlotOne;
                @SlotTwo.started += instance.OnSlotTwo;
                @SlotTwo.performed += instance.OnSlotTwo;
                @SlotTwo.canceled += instance.OnSlotTwo;
                @SlotThree.started += instance.OnSlotThree;
                @SlotThree.performed += instance.OnSlotThree;
                @SlotThree.canceled += instance.OnSlotThree;
            }
        }
    }
    public MainActions @Main => new MainActions(this);
    public interface IMainActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnSlotOne(InputAction.CallbackContext context);
        void OnSlotTwo(InputAction.CallbackContext context);
        void OnSlotThree(InputAction.CallbackContext context);
    }
}
